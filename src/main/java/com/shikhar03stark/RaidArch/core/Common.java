package com.shikhar03stark.RaidArch.core;
/*Directory Setup
 *File Stream Setup 
 * */

import java.io.File;
import java.io.IOException;
import java.nio.file.*;
import java.util.Comparator;
import java.util.stream.Stream;

public class Common {
	public static boolean validSimDir(RaidConfig config) {
		Path dirPath = Paths.get(config.getSimulationPath());
		boolean response = (Files.exists(dirPath) && Files.isDirectory(dirPath));
		return response;
	}
	
	public static boolean createSimDir(RaidConfig config) {
		Path dirPath = Paths.get(config.getSimulationPath());
		try {			
			Files.createDirectory(dirPath);
			return true;
		} catch (IOException e) {
			System.err.println(e);
		}
		
		return false;
	}
	
	public static boolean hasMetafile(RaidConfig config) {
		Path dirPath = Paths.get(config.getSimulationPath());
		try(DirectoryStream<Path> stream = Files.newDirectoryStream(dirPath)){
			for(Path file: stream) {
				if(file.getFileName().toString().equals(".metafile")) {
					return true;
				}
			}
		} catch(IOException | DirectoryIteratorException e) {
			System.err.println(e);
		}
		
		return false;
	}
	
	
	public static boolean createMetafile(RaidConfig config) {
		Path metafilePath = Paths.get(config.getSimulationPath()+".metafile");
		try {
			Files.createFile(metafilePath);
			return true;
		} catch (IOException e) {
			System.err.println(e);
		}
		return false;
	}
	
	public static boolean cleanSimDir(RaidConfig config) {
		Path simDir = Paths.get(config.getSimulationPath());
		
		try(Stream<Path> stream = Files.walk(simDir)){
			stream.sorted(Comparator.reverseOrder())
			.map(Path::toFile)
			.forEach(File::delete);
			
			createSimDir(config);
			createMetafile(config);
			return true;
			
		} catch (IOException e) {
			System.err.println(e);
		}
		
		return false;
	}
	
	public static boolean setupNewDrives(RaidConfig config) {
		String simRoot = config.getSimulationPath();
		int drives = config.getVirtualDrives();
		try {			
			for(int i = 0; i<drives; i++) {
				String driveLocation = simRoot + "Drive" + i;
				Path drivePath = Paths.get(driveLocation);
				Files.createDirectory(drivePath);
			}
			return true;
		} catch(IOException e) {
			
		}
		
		return false;
	}
	
	public static boolean isSimDirHealthy(RaidConfig config) {
		if(validSimDir(config)) {
			int drives = config.getVirtualDrives();
			Path simDir = Paths.get(config.getSimulationPath());
			try (Stream<Path> stream = Files.walk(simDir)){
				if(stream.count() == drives+2) {
					return true;
				}
				else {
					return false;
				}
			}catch(IOException e) {
				System.err.println(e);
			}
		}
		else {
			return false;
		}
		return false;
	}
	
	public static boolean isMetafileEmpty(RaidConfig config) {
		Path metafile = Paths.get(config.getSimulationPath()+".metafile");
		try {			
			if(Files.size(metafile) > 0) {
				return false;
			}
		} catch (IOException e) {
			System.err.println(e);
		}
		
		return true;
	}
	
	public static boolean generateMetaStub(RaidConfig config) {
		String metafileLocation = config.getSimulationPath()+".metafile";
		String[] stub = {"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n",
				"<!-- !!DO NOT EDIT THIS FILE -->\n",
				"<metadata>\n",
				"</metadata>\n"};
		try {
			Files.write(Paths.get(metafileLocation), stub[0].getBytes(), StandardOpenOption.APPEND);
			Files.write(Paths.get(metafileLocation), stub[1].getBytes(), StandardOpenOption.APPEND);
			Files.write(Paths.get(metafileLocation), stub[2].getBytes(), StandardOpenOption.APPEND);
			Files.write(Paths.get(metafileLocation), stub[3].getBytes(), StandardOpenOption.APPEND);
			return true;
		} catch (IOException e) {
			System.err.println(e);
		}
		
		return false;
	}
	
	public static boolean setupSimDir(RaidConfig config) {
		boolean isFine = true;
		
		//first check if SimulationDir exists 
		if(!validSimDir(config)) {
			isFine = isFine && createSimDir(config);
		}
		//genMetafile if doesn't exist
		if(!hasMetafile(config)) {
			isFine = isFine && createMetafile(config);
		}
		
		if(!isSimDirHealthy(config)) {
			cleanSimDir(config);
			setupNewDrives(config);
		}
		
		if(isMetafileEmpty(config)) {
			isFine = isFine && generateMetaStub(config);
		}
		
		return isFine;
	}
	
}
